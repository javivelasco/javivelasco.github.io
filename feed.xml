<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>@javivelasco</title>
    <description>This is the new personal site for a software gardener that is trying to improve himself always. Built on Jekyll
</description>
    <link>http://javivelasco.com/</link>
    <atom:link href="http://javivelasco.com/feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Sat, 01 Aug 2015 15:36:26 +0200</pubDate>
    <lastBuildDate>Sat, 01 Aug 2015 15:36:26 +0200</lastBuildDate>
    <generator>Jekyll v2.4.0</generator>
    
      <item>
        <title>December reading list update</title>
        <description>&lt;p&gt;Two months and a half ago, still being not familiar with traffic in such big city like Madrid, I though I could drive to work everyday early in the morning. I cannot imagine how wrong I was... eventually, I decided it was better to ride the &lt;strong&gt;subway&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;But, like Monty Python&amp;#39;s said:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Always look on the bright side of life&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and certainly it feels great to have time to read in my way to work. I had had the chance of finishing several books that were listed in my &lt;a href=&quot;http://blog.javivelasco.com/reading-list-update/&quot;&gt;last update&lt;/a&gt;, and a couple extra. I&amp;#39;m going to &lt;strong&gt;briefly&lt;/strong&gt; speak about them and write down the list in its current status.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;https://leanpub.com/4rulesofsimpledesign&quot;&gt;Understanding the four rules of simple design&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&quot;https://twitter.com/coreyhaines&quot;&gt;Corey Haynes&lt;/a&gt; was a very nice reading. Corey has been a facilitator in &lt;em&gt;coderetreat&lt;/em&gt; workshops in which participants faced different approachs to resolve &lt;a href=&quot;http://en.wikipedia.org/wiki/Conway%27s_Game_of_Life&quot;&gt;Conway&amp;#39;s Game of Life&lt;/a&gt;. The book explores, by using examples, different patterns emerged during those retreats, keeping in mind the 4 rules of design originally proposed by &lt;a href=&quot;https://twitter.com/kentbeck&quot;&gt;Kent Beck&lt;/a&gt;:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;Tests pass&lt;/li&gt;
&lt;li&gt;Expresses Intent&lt;/li&gt;
&lt;li&gt;No duplication (DRY)&lt;/li&gt;
&lt;li&gt;Small&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;This way, the author talks about how test names should influence the object&amp;#39;s API, DRY principle, how to replace procedural polymorphism, and much more. A great reading (and quite short) for both beginners and experts.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/Hacking-Your-Education-Lectures-Thousands/dp/0399159967&quot;&gt;Hacking your education&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&quot;https://twitter.com/DaleJStephens&quot;&gt;Dale J. Stephens&lt;/a&gt; is definitely a book everybody should read, specially software professionals. In our proffesion we are &lt;em&gt;damned&lt;/em&gt; to adapt or die, and this is a book about education out of school; jus as we do. Dale tells his experience as a college dropout and also the story of a lot of succesful people who made it by doing what they were passionate about, and not what they were supposed to do (like &lt;a href=&quot;http://alexmaccaw.com/&quot;&gt;Alex MacCaw&lt;/a&gt; or &lt;a href=&quot;http://www.ryanholiday.net/&quot;&gt;Ryan Holiday&lt;/a&gt;). A lot of advice that will help you set your mind towards a learning attitude.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.amazon.es/How-Google-Works-Eric-Schmidt/dp/1455582344&quot;&gt;How Google Works&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&quot;https://twitter.com/ericschmidt&quot;&gt;Eric Schmidt&lt;/a&gt; &amp;amp; &lt;a href=&quot;https://twitter.com/jjrosenberg&quot;&gt;Jonathan Rosenberg&lt;/a&gt; is being a controversial book in the United States. Not everybody agree with some of the exposed ideas there. I think it was not the best read for me at that moment. It&amp;#39;s too focused on how to build a successful company which is not what I do nowadays. Our &lt;a href=&quot;www.traity.com&quot;&gt;Traity&lt;/a&gt; peers encouraged us all to read it in order to have a starting point for a conversation about company culture. I have to say it helped. In general terms it&amp;#39;s an enjoyable reading, but it can become repetitive and too focused on the good points of Google. I&amp;#39;m quite sure that bad things happened too but they were not mentioned.&lt;/p&gt;

&lt;p&gt;I can say nothing about &lt;strong&gt;&lt;a href=&quot;http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt;&lt;/strong&gt;, by &lt;a href=&quot;https://twitter.com/PragmaticAndy&quot;&gt;Andrew Hunt&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/pragdave&quot;&gt;Dave Thomas&lt;/a&gt;, not already said by someone else. It&amp;#39;s a classic, just like &lt;a href=&quot;http://www.amazon.es/Clean-code-Handbook-Software-Craftsmanship/dp/0132350882&quot;&gt;Clean Code&lt;/a&gt;. A must read for developers and software professionals in general. You will learn about programmer philosophy, what is to be pragmatic, design patterns, how to communicate and flexibility of software among many other topics. If you keep a reading list like me, this book should be the next to read.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://www.effectiveruby.com/&quot;&gt;Effective Ruby&lt;/a&gt;&lt;/strong&gt; by &lt;a href=&quot;https://twitter.com/contextualdev&quot;&gt;Peter J. Jones&lt;/a&gt; is the most technical book on this list. Our stack in &lt;a href=&quot;www.traity.com&quot;&gt;Traity&lt;/a&gt; is mostly written in &lt;a href=&quot;https://www.ruby-lang.org/en/&quot;&gt;Ruby&lt;/a&gt; so I&amp;#39;m working with it everyday. I wanted to improve the way I work with Ruby and understand every single aspect of the language and avoiding &lt;em&gt;programming by coincidence&lt;/em&gt;. This is not a book for beginners, you should be already familiar with Ruby to get the most of it. That was my case and I learned deeply how inheritance work, how to optimize memory usage, metaprogramming, effective use of collections, etc. A funny and productive reading totally recommended if you work (or plan to work) with Ruby language.&lt;/p&gt;

&lt;p&gt;And that&amp;#39;s all I read lately! I need to &lt;strong&gt;populate&lt;/strong&gt; my reading list and I have changed the order of the last two books from my last update and I&amp;#39;ve inserted another one that I&amp;#39;m reading from time to time. Anyway, here is it:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.es/What-If-Scientific-Hypothetical-Questions/dp/0544272994&quot;&gt;What if?: Serious Scientific Answers to Absurd Hypothetical Questions&lt;/a&gt; by &lt;a href=&quot;http://xkcd.com/about/&quot;&gt;Randall Munroe&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Nine-Algorithms-That-Changed-Future/dp/0691158193&quot;&gt;Nine Algorithms that Changed the Future&lt;/a&gt; by John MacCormick&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/software-architecture-for-developers&quot;&gt;Software Architecture for Developers&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/simonbrown&quot;&gt;Simon Brown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.es/Design-Patterns-Elements-Reusable-Object-Oriented/dp/0201633612&quot;&gt;Design Patterns. Elements of Reusable OO Software&lt;/a&gt; by &lt;a href=&quot;http://en.wikipedia.org/wiki/Design_Patterns&quot;&gt;The Gang of Four&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.fivesimplesteps.com/products/hardboiled-web-design&quot;&gt;Hardboiled Web Design&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/malarkey&quot;&gt;Andy Clarke&lt;/a&gt;&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;I have to say Randall Munroe&amp;#39;s book can be read combined with other because chapters are completely self contained. My plan is to start number 2 and switch with 1 from time to time.&lt;/p&gt;
</description>
        <pubDate>Mon, 08 Dec 2014 00:00:00 +0100</pubDate>
        <link>http://javivelasco.com/reading-list/2014/12/08/december-reading-list-update.html</link>
        <guid isPermaLink="true">http://javivelasco.com/reading-list/2014/12/08/december-reading-list-update.html</guid>
        
        
        <category>reading-list</category>
        
      </item>
    
      <item>
        <title>Nested exceptions cause in Ruby</title>
        <description>&lt;p&gt;I like to write a blog post when I figure out something that is &lt;strong&gt;difficult&lt;/strong&gt; to find online. Writing for the sake of writing is meaningless for me, that&amp;#39;s why there are not too much blog posts here. Anyway, a couple of days ago I learned about a Ruby exception function used in &lt;a href=&quot;http://honeybadger.io/&quot;&gt;Honeybadger&lt;/a&gt; that was screwing up our error tracking at &lt;a href=&quot;www.traity.com&quot;&gt;Traity&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Say you have a general exception &lt;code&gt;GeneralError&lt;/code&gt; in your code that has been rescued. Inside the code that handles the rescue it&amp;#39;s possible to raise &lt;strong&gt;another&lt;/strong&gt; exception &lt;code&gt;SpecificError&lt;/code&gt; that will not be handled so you want it to reach the exception middleware. Something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;error_raise_function&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GeneralError&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;GeneralError&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# Some handling code&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;raise&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SpecificError&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You might think this is not a good practice. If both are custom exceptions you can think we are using exceptions for flow control (probably not a good use of exceptions). But what if the &lt;code&gt;GeneralError&lt;/code&gt; is raised by a &lt;strong&gt;third party&lt;/strong&gt; library such as &lt;a href=&quot;https://github.com/aws/aws-sdk-ruby&quot;&gt;AWS SDK&lt;/a&gt;? Well, we wanted HoneyBadger to track the &lt;code&gt;SpecificError&lt;/code&gt;, and to nest all similar errors in the same issue. The problem was that every exception that occured inside the rescue &lt;code&gt;GeneralError&lt;/code&gt; block was being grouped in a &lt;code&gt;GeneralError&lt;/code&gt; issue (the rescued exception). What the hell? Well, if you take a look into &lt;a href=&quot;https://github.com/honeybadger-io/honeybadger-ruby/blob/4068e809b227504e9fc77861174dd4072c0f0725/lib/honeybadger.rb&quot;&gt;HoneyBadger module&lt;/a&gt; line 192 you will see this code:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;unless&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;unwrap_exceptions&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:original_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;original_exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:continued_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;continued_exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;respond_to?&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;ss&quot;&gt;:cause&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;In our case, the unwrap of the exception was returning the value of &lt;code&gt;exception.cause&lt;/code&gt; and, the cause of the &lt;code&gt;SpecificError&lt;/code&gt; was the &lt;code&gt;OriginalError&lt;/code&gt;. That means that, at least with Honeybadger, all nested exceptions will result in a nesting named as the &lt;strong&gt;original exception&lt;/strong&gt;:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;foo&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;error_raise_function&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;rescue&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;SpecificError&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;
    &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cause&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;foo&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;# OriginalError will be printed&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Be aware of that feature. Probably it&amp;#39;s the wanted behavior for HoneyBadger but that was definitively not what we wanted. I think it should be &lt;strong&gt;configurable&lt;/strong&gt; anyway but the workaround I did for our case before opening a pull request at &lt;a href=&quot;www.github.com&quot;&gt;Github&lt;/a&gt; was as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;c1&quot;&gt;# honeybadger.rb&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;honeybadger&amp;#39;&lt;/span&gt;

&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;Honeybadger&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
    &lt;span class=&quot;kp&quot;&gt;private&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;unwrap_exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;exception&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

&lt;span class=&quot;no&quot;&gt;Honeybadger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;api_key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;HONEYBADGER_API_KEY&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Just by &lt;strong&gt;redefining&lt;/strong&gt; the method and returning the exception that reached the middleware should be enough. I hope you to find this post useful!&lt;/p&gt;
</description>
        <pubDate>Sun, 07 Dec 2014 00:00:00 +0100</pubDate>
        <link>http://javivelasco.com/sinatra/ruby/2014/12/07/nested-exceptions-cause-in-ruby.html</link>
        <guid isPermaLink="true">http://javivelasco.com/sinatra/ruby/2014/12/07/nested-exceptions-cause-in-ruby.html</guid>
        
        
        <category>sinatra</category>
        
        <category>ruby</category>
        
      </item>
    
      <item>
        <title>Badass asset pipeline for Sinatra</title>
        <description>&lt;p&gt;High level frameworks are great to create &lt;strong&gt;prototypes&lt;/strong&gt;. If you adjust yourself to the rules, you can get things done really fast. It turns out that when you develop a big application, working with the limitations of a framework can become &lt;strong&gt;annoying&lt;/strong&gt;. For those situations, the best option is to implement an architecture which adjusts to your needs, not otherwise. That can be done by using a minimalistic framework such as Express, Flask, or &lt;a href=&quot;http://www.sinatrarb.com/&quot;&gt;&lt;strong&gt;Sinatra&lt;/strong&gt;&lt;/a&gt; which is the one we use at &lt;a href=&quot;http://www.traity.com&quot;&gt;Traity&lt;/a&gt;.&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sinatra is a DSL for quickly creating web applications in Ruby with minimal effort.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;It is so minimalist that it&amp;#39;s defined as a &lt;strong&gt;DSL&lt;/strong&gt; in the docs, instead of as a framework. For example, you don&amp;#39;t have anything to make easier to work with asset files. Today I&amp;#39;m going to show you how I&amp;#39;ve configured a &lt;strong&gt;Badass Asset Pipeline&lt;/strong&gt; for Sinatra which works exactly the same as the implemented in Ruby on Rails.&lt;/p&gt;

&lt;h2&gt;Based in Sprockets&lt;/h2&gt;

&lt;p&gt;If you came here looking for a solution to manage your asset pipeline and make it look similar to Rails&amp;#39; I&amp;#39;m quite sure you already know about &lt;a href=&quot;https://github.com/sstephenson/sprockets&quot;&gt;&lt;strong&gt;Sprockets&lt;/strong&gt;&lt;/a&gt;. Just in case, I&amp;#39;m gonna briefly mention what is it here, but if you already know about it, feel free to skip this section.&lt;/p&gt;

&lt;p&gt;Sprockets is a Ruby library for compiling and serving web assets, and it&amp;#39;s the core of Rails asset managing. It features declarative &lt;strong&gt;dependency&lt;/strong&gt; management for JavaScript and CSS assets, as well as a powerful preprocessor pipeline that allows you to write assets in languages like CoffeeScript, Sass and SCSS.&lt;/p&gt;

&lt;p&gt;You&amp;#39;ll just have to define the paths where your assets are (later we&amp;#39;ll see how), and to set some asset &lt;strong&gt;bundle files&lt;/strong&gt;. Each asset bundle is a Javascript or Stylesheet file that specifies, by using a simple special syntax, a bunch of dependencies. An example of a bundled file for Javascript could be:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;# File application.js&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;jquery&amp;#39;&lt;/span&gt;
&lt;span class=&quot;p&quot;&gt;\\&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;base&amp;#39;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This will tell Sprockets that &lt;code&gt;application.js&lt;/code&gt; is composed by &lt;code&gt;jquery&lt;/code&gt; and &lt;code&gt;base&lt;/code&gt; files, and those files could have been written using raw Javascript, or with a preprocessor language such as Coffeescript.&lt;/p&gt;

&lt;p&gt;Sprockets automatically manages defined dependencies. Depending on the configuration, they can be served by HTTP as separated files, concatenated in a single file, or minimized and compressed. Furthermore, If the dependencies source files are written with a preprocessor language as mentioned above, Sprockets will compile them when they are requested.&lt;/p&gt;

&lt;p&gt;This way, instead of including in the HTML each separated dependency, we just need to include the bundle files. Sprockets will figure out the content or composition depending on the &lt;strong&gt;environment&lt;/strong&gt; and the given &lt;strong&gt;configuration&lt;/strong&gt;. So powerful.&lt;/p&gt;

&lt;h2&gt;Dependencies&lt;/h2&gt;

&lt;p&gt;As I said, this post is about configuration. We are going to put together a bunch of libraries so let&amp;#39;s start defining the dependencies.&lt;/p&gt;

&lt;p&gt;First and most important: we need to add Sprockets. Although it manages the dependencies and give us access to them, it&amp;#39;s really handy to have some &lt;strong&gt;helper&lt;/strong&gt; functions to make access more declarative. Rails defines some helpers, and we should do the same. Fortunately, &lt;a href=&quot;https://twitter.com/petebrowne&quot;&gt;Pete Browne&lt;/a&gt; has developed a &lt;a href=&quot;https://github.com/petebrowne/sprockets-helpers&quot;&gt;gem&lt;/a&gt; which defines all helpers we need, let&amp;#39;s add it too.&lt;/p&gt;

&lt;p&gt;In order to compress and minimize assets for production, We&amp;#39;ll add &lt;a href=&quot;https://github.com/sstephenson/ruby-yui-compressor&quot;&gt;YUI compressor&lt;/a&gt; for CSS, and &lt;a href=&quot;https://github.com/google/closure-compiler&quot;&gt;Closure&lt;/a&gt; for Javascript. I&amp;#39;m also going to include &lt;a href=&quot;http://compass-style.org/&quot;&gt;Compass&lt;/a&gt;, a must-have for my projects. You can check the &lt;a href=&quot;https://github.com/javivelasco/sinatra-badass-asset-pipeline/blob/master/Gemfile&quot;&gt;Gemfile&lt;/a&gt; of the &lt;a href=&quot;https://github.com/javivelasco/sinatra-badass-asset-pipeline&quot;&gt;example project&lt;/a&gt; I&amp;#39;ve uploaded to Github to review the full dependencies.&lt;/p&gt;

&lt;h2&gt;Asset Pipeline module&lt;/h2&gt;

&lt;p&gt;Get yourself a Sinatra boilerplate, or start with a &lt;a href=&quot;http://www.sinatrarb.com/intro.html#Sinatra::Base%20-%20Middleware,%20Libraries,%20and%20Modular%20Apps&quot;&gt;modular&lt;/a&gt; basic application. Remember you can check my own &lt;a href=&quot;https://github.com/javivelasco/sinatra-badass-asset-pipeline/&quot;&gt;example&lt;/a&gt; if you want to start from there.&lt;/p&gt;

&lt;p&gt;We are going to set the configuration in a module that will be &lt;strong&gt;imported&lt;/strong&gt; by the base application. As a Sinatra modular app, our module should define a &lt;code&gt;register&lt;/code&gt; method, so the app is obtained inside the lambda block where the configuration will be set.&lt;/p&gt;

&lt;h3&gt;General configuration&lt;/h3&gt;

&lt;p&gt;First thing we need to do is to create an &lt;strong&gt;instance&lt;/strong&gt; of &lt;code&gt;Sprockets::Environment&lt;/code&gt; and initialize it with the root path of the app to access and serve assets.&lt;/p&gt;

&lt;p&gt;Then let&amp;#39;s set the &lt;strong&gt;load path&lt;/strong&gt; which is an ordered list of directories that Sprockets uses to search for assets. We&amp;#39;ll do this through &lt;code&gt;append_path&lt;/code&gt; method of the Sprockets instance.&lt;/p&gt;

&lt;p&gt;Now we need to specify an array with the assets bundles and the rest of files that would be precompiled. Each asset bundle is a javascript or stylesheet file that specifies, by using a simple special syntax, a bunch of dependencies (more Javascript and CSS files).&lt;/p&gt;

&lt;p&gt;So far so good. This is our configuration at this point:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AssetPipeline&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assets_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&amp;gt;&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;public_folder&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;assets&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;}&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;set&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assets_precompile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;sx&quot;&gt;%w(application.js application.css application-modernizr.js application-api.js *.png *.jpg *.svg *.eot *.ttf *.woff)&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;assets/fonts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;assets/javascripts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;assets/stylesheets&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;assets/images&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;append_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;vendor/assets/javascripts&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Configuring for environments&lt;/h3&gt;

&lt;p&gt;Obviously, we need to have a different configuration to serve the assets in different environments. For example, in development we would like to serve each asset dependency file &lt;strong&gt;separated&lt;/strong&gt; in order to make easier debugging. In production we&amp;#39;ll probably want to serve assets through a CDN, and we would probably want them to be &lt;strong&gt;compressed&lt;/strong&gt;, &lt;strong&gt;unified&lt;/strong&gt; and &lt;strong&gt;minimized&lt;/strong&gt;.&lt;/p&gt;

&lt;h4&gt;Configuration for development&lt;/h4&gt;

&lt;p&gt;Sprockets is capable of serving assets through HTTP but it&amp;#39;s not configured yet. Let&amp;#39;s make it work. Remember that we are in a Sinatra app and we can define a route at &lt;code&gt;/assets/*&lt;/code&gt; as usual. The trick is to catch the request and map it to our Sprockets instance, stripping the base path. The instance will return the asset. For instance, calling to &lt;code&gt;GET /assets/base.css&lt;/code&gt; will search for and return &lt;code&gt;base.css&lt;/code&gt;. If base is defined as a SASS file, it will be compiled to CSS for you.&lt;/p&gt;

&lt;p&gt;That drives us to another question. In each request Sprockets is going to compile assets that were developed using a preprocessor; it can turn into a performance issue as the application grows. We can solve this problem by setting a &lt;strong&gt;cache&lt;/strong&gt; in order to compile just what changed from the last request. Let&amp;#39;s see the full configuration for development:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AssetPipeline&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:development&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;FileStore&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;./tmp&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/assets/*&amp;#39;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;&amp;#39;PATH_INFO&amp;#39;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sub!&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;sr&quot;&gt;%r{^/assets}&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;settings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;call&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;env&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h4&gt;Configuration for production&lt;/h4&gt;

&lt;p&gt;When we are in a production environment, assets will be compiled and automatically moved to a &lt;code&gt;public&lt;/code&gt; directory of our application. Because of that, we no longer need to configure a route to serve assets, neither a cache. It&amp;#39;s worthy to mention that a cache can be set anyway in order to have faster &lt;strong&gt;deployments&lt;/strong&gt; but it&amp;#39;s not needed.&lt;/p&gt;

&lt;p&gt;What it&amp;#39;s actually a must is to set the compressors for CSS and Javascript. It can be easily done with:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AssetPipeline&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:production&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;js_compressor&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Closure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Compiler&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;css_compressor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;YUI&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;CssCompressor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The application is now ready yo precompile assets for production.&lt;/p&gt;

&lt;h3&gt;Setting up Helpers&lt;/h3&gt;

&lt;p&gt;We have mentioned previously that Rails defines helpers to manage the assets. Thanks to those helpers it&amp;#39;s really easy to &lt;strong&gt;reference&lt;/strong&gt; images, stylesheets and javascript files all across our application. We already included a gem to define this helpers but we still need to add configuration.&lt;/p&gt;

&lt;p&gt;In this case is kind of intuitive. We just need set our Sprockets instance, the asset path prefix, a flag to tell if we want to have debugging information for compiled files available, where is located the compiling manifesto , and if we added a digest at the end of the asset file names in order to make them unique.&lt;/p&gt;

&lt;p&gt;These two last options are included when we are in production, while the debug information should be available only during development. After the configuration is set, we need to add the Helper module to the application. Said so, the configuration can be as follows:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AssetPipeline&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Helpers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;prefix&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;/assets&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;debug&lt;/span&gt;       &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;development?&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;production?&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;digest&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
        &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;manifesto.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
      &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

    &lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;helpers&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Helpers&lt;/span&gt;
    &lt;span class=&quot;c1&quot;&gt;# ...&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Then you&amp;#39;ll be able to, for example, include all the Javascript files in your application by setting in &lt;code&gt;index.haml&lt;/code&gt; template &lt;code&gt;= javascript_tag &amp;#39;application&amp;#39;&lt;/code&gt;. In production environment this function will return a script tag including &lt;code&gt;application.js&lt;/code&gt;. For develoment it will return multiple script tags, one for each dependency. The same happens for stylesheets and other assets.&lt;/p&gt;

&lt;h3&gt;Extra ball: Compass&lt;/h3&gt;

&lt;p&gt;Compass is an open-source CSS Authoring Framework which gives reusable CSS patterns, mixins for CSS3 vendor prefixes, typographic rhythms, etc. It&amp;#39;s really useful and is easy to configure and integrate with Sprockets. All we need is to tell Compass where are located our images and, in order to use the sprite generation feature, where do we want to generate sprites. The configuration is as easy as this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;AssetPipeline&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;extend&lt;/span&gt; &lt;span class=&quot;nb&quot;&gt;self&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;registered&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;Compass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configuration&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images_dir&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;assets&amp;#39;&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;images_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;assets/images&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
      &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;generated_images_path&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;app&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;root&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;assets/images&amp;#39;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
    &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;h3&gt;Assets precompile for production&lt;/h3&gt;

&lt;p&gt;We need to define a Rake task that will be executed on deploying to production. This task is responsible for compiling, unifying and compressing our asset dependencies. Let&amp;#39;s see how can we set up the task, it&amp;#39;s easy.&lt;/p&gt;

&lt;p&gt;We are going to have two tasks. One for precompiling the assets, and a second one to cleanup generated assets. For the first task we need to have an instance of Sprockets, and we also need to create a manifesto file which will indicate the mapping between dependencies and compiled files. Finally, we just need to run the compile method over the manifest file, giving the array of files that should be compiled as argument.&lt;/p&gt;

&lt;p&gt;Does it sound familiar to you? Everything is already defined at our pipeline module which is included in the base application file! Let&amp;#39;s grab that module and therefrom set the task, keeping this way the same configuration. The result can be something like this:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake/tasklib&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;rake/sprocketstask&amp;#39;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;require&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;./app&amp;#39;&lt;/span&gt;

&lt;span class=&quot;n&quot;&gt;namespace&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:assets&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s1&quot;&gt;&amp;#39;Precompile assets&amp;#39;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:precompile&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;BadassExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;Sprockets&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;::&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;Manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;new&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;environment&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BadassExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;manifesto.json&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;))&lt;/span&gt;
    &lt;span class=&quot;n&quot;&gt;manifest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;compile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BadassExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets_precompile&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;

  &lt;span class=&quot;n&quot;&gt;desc&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;Clean assets&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;task&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;:clean&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt;
    &lt;span class=&quot;no&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;rm_rf&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;BadassExample&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;assets_path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As you see, we defined also a second task to delete all generated files. It&amp;#39;s important to notice that in order to compile and compress the assets, the task has to be called within a production environment. Test it like:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ RACK_ENV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;production rake assets:precompile
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;And you will have all compiled assets into the public directory. Best thing is that when you run your application within production environment with &lt;code&gt;RACK_ENV=production rackup&lt;/code&gt;, Sprocket manages the dependencies and will serve you the production assets. If with the same configuration you lift up the app with just &lt;code&gt;rackup&lt;/code&gt;, you&amp;#39;ll be in a development environment, and the assets served by Sprockets will be separated and non compressed with development information added.&lt;/p&gt;

&lt;h2&gt;Summary&lt;/h2&gt;

&lt;p&gt;It&amp;#39;s not easy to write a post about configuration, a lot of concepts should be kept in mind. In this article we saw what is Sprockets, and how can we configure it with Sprockets Helpers to have a working asset pipeline similar to Rails&amp;#39;. We saw how can it be configured for both development and production environments, and to turn your almost non-existent Sinatra Pipeline into a Real Badass Pipeline.&lt;/p&gt;

&lt;p&gt;Good luck! and remember you can reach me through @javivelasco at Twitter with any inquiries or comments.&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Oct 2014 00:00:00 +0200</pubDate>
        <link>http://javivelasco.com/sinatra/ruby/pipeline/2014/10/19/badass-asset-pipeline-for-sinatra.html</link>
        <guid isPermaLink="true">http://javivelasco.com/sinatra/ruby/pipeline/2014/10/19/badass-asset-pipeline-for-sinatra.html</guid>
        
        
        <category>sinatra</category>
        
        <category>ruby</category>
        
        <category>pipeline</category>
        
      </item>
    
      <item>
        <title>Reading list update</title>
        <description>&lt;p&gt;I&amp;#39;m going to try to keep updating my blog at least once a week. I know it&amp;#39;s all about being consistant, but I&amp;#39;m gonna do it! I&amp;#39;m going to start with this update of my &lt;strong&gt;reading list&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;First I&amp;#39;d like to mention a book that I finally read a couple of months ago. I think it&amp;#39;s a must-read for anyone who tries to improve professionally, day-to-day. I&amp;#39;m talking about &lt;a href=&quot;http://shop.oreilly.com/product/9780596518387.do&quot;&gt;Apprenticeship Patterns: Guidance for the Aspiring Software Craftsman&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/davehoover&quot;&gt;Dave Hoover&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/ade_oshineye&quot;&gt;Adewale Oshineye&lt;/a&gt;. It&amp;#39;s a &lt;strong&gt;guide&lt;/strong&gt; of patterns and actions that should be like a reference to look back at along our &lt;em&gt;journey&lt;/em&gt;, some are more difficult than others to forget. Today I&amp;#39;m following one of the given patterns by keeping an open and updated reading list.&lt;/p&gt;

&lt;p&gt;After a month without reading anything, I took advantage of my holidays to read &lt;a href=&quot;https://leanpub.com/socra&quot;&gt;Software Craftsmanship&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/sandromancuso&quot;&gt;Sandro Mancuso&lt;/a&gt;. In the book, the author talks about values, attitude, and motivation for the aspiring &lt;strong&gt;software craftsman&lt;/strong&gt;. What is Software Craftsmanship? Is it trying to replace Agile? How can I encourage my team to follow eXtreme Programming (XP) and become better professionals? All those questions are developed in the book, but not just that. The author also talks about recruiting and finding partnership from the point of view of developers and companies. He gives guidance, not only on how to find a company aligned with your values, but also on finding people who actually want to &lt;strong&gt;craft code&lt;/strong&gt; and not just type code. All of that makes the book a great reading, not just for developers but also for managers and companies that want people who really give value. I really enjoyed it!&lt;/p&gt;

&lt;p&gt;If you, just like me, feel that your job is &lt;strong&gt;not&lt;/strong&gt; &lt;em&gt;just a job&lt;/em&gt;, and you want to: be a better professional, walk this long road to mastery, share your knowledge... Then these two books are a must-read. So, on that note, here is my list with the next books I&amp;#39;m going to read:&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/4rulesofsimpledesign&quot;&gt;Understanding the 4 Rules of Simple Design&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/coreyhaines&quot;&gt;Corey Haines&lt;/a&gt;.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Hacking-Your-Education-Lectures-Thousands/dp/0399159967&quot;&gt;Hacking your education&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/DaleJStephens&quot;&gt;Dale J. Stephens&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/The-Pragmatic-Programmer-Journeyman-Master/dp/020161622X&quot;&gt;The Pragmatic Programmer&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/PragmaticAndy&quot;&gt;Andrew Hunt&lt;/a&gt; and &lt;a href=&quot;https://twitter.com/pragdave&quot;&gt;David Thomas&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/software-architecture-for-developers&quot;&gt;Software Architecture for Developers&lt;/a&gt; by &lt;a href=&quot;https://twitter.com/simonbrown&quot;&gt;Simon Brown&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.amazon.com/Nine-Algorithms-That-Changed-Future/dp/0691158193&quot;&gt;Nine Algorithms that Changed the Future&lt;/a&gt; by John McCormick&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;If you have recommendations or any comments, please let me know at &lt;a href=&quot;https://twitter.com/javivelasco&quot;&gt;@javivelasco&lt;/a&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 25 Aug 2014 00:00:00 +0200</pubDate>
        <link>http://javivelasco.com/reading-list/2014/08/25/reading-list-update.html</link>
        <guid isPermaLink="true">http://javivelasco.com/reading-list/2014/08/25/reading-list-update.html</guid>
        
        
        <category>reading-list</category>
        
      </item>
    
      <item>
        <title>Dive into Vagrant</title>
        <description>&lt;p&gt;There are problems that developers should face on typical scenarios. An example is the fact that you never develop in the exactly same environment in which your app runs in production. It happens too, that if you&amp;#39;re working with other fellas in the same project, the common situation is to have slightly different environments. It&amp;#39;s difficult to duplicate the same environment in all developer machines; &lt;a href=&quot;http://www.vagrantup.com&quot;&gt;Vagrant&lt;/a&gt; can help you to solve this problems.&lt;/p&gt;

&lt;h3&gt;What is Vagrant&lt;/h3&gt;

&lt;p&gt;Vagrant helps you to set up and manage &lt;strong&gt;virtual environments&lt;/strong&gt;, so you can run a small Linux distribution image (called a box) inside your operating system, and run an application and its dependencies easily inside of it. Then, you can package your configured machine and share with others, or just share your configuration files and replicate the same environment all across machines. Let&amp;#39;s see a little terminology before we start:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Box: a bundle containing your operating system image and metadata.&lt;/li&gt;
&lt;li&gt;Host &amp;amp; Guest machine: host is one who starts Vagrant while guest is the virtualized one.&lt;/li&gt;
&lt;li&gt;Providers: software that handles the virtualization process (i.e. VirtualBox).&lt;/li&gt;
&lt;li&gt;VagrantFile: hold the definition of the machine (Ruby language).&lt;/li&gt;
&lt;li&gt;Shared folder: allows you to edit your files in the host while running in the guest.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vagrant installation is quite easy since pre-built &lt;a href=&quot;http://www.vagrantup.com/downloads.html&quot;&gt;binaries&lt;/a&gt; are distributed for almost all systems. Before installing it, you should install the provider you want to use. I recommend you &lt;a href=&quot;https://www.virtualbox.org/&quot;&gt;Virtual Box&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Getting started&lt;/h3&gt;

&lt;p&gt;Once you have Vagrant and a provisioner installed, you can start playing with it. Let&amp;#39;s try an example by typing &lt;code&gt;vagrant init&lt;/code&gt; in a new empty folder. A &lt;code&gt;VagrantFile&lt;/code&gt; will be created with a minimum configuration and a lot of comments documenting the available options. For this example, copy this configuration:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;no&quot;&gt;Vagrant&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;do&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;|&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;box&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;hashicorp/precise64&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;forwarded_port&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;guest&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;80&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;host&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;8080&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;network&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;private_network&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;ip&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;33.33.33.10&amp;quot;&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ssh&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;forward_agent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kp&quot;&gt;true&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;synced_folder&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;apps&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;/apps&amp;quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;With the first option we are telling Vagrant that we want to use an Ubuntu Precise box to create the virtual machine, you can browse more boxes &lt;a href=&quot;https://vagrantcloud.com/discover/featured&quot;&gt;here&lt;/a&gt;. Next, we are forwarding port 80 in the guest machine to 8080 in our host. Then, we are assigning an IP address to the guest machine so it can be named in our host and accessible by others in our local network. Finally, we are telling that we want to forward our host ssh agent and to sync a folder called &lt;code&gt;apps&lt;/code&gt; to a folder named &lt;code&gt;/apps&lt;/code&gt; in the guest.&lt;/p&gt;

&lt;p&gt;The shared folder should exists when the machine is turned on, so create an empty folder named &lt;code&gt;apps&lt;/code&gt; in the same location as the VagrantFile. Now you can run &lt;code&gt;vagrant up&lt;/code&gt; and &lt;code&gt;vagrant ssh&lt;/code&gt;. You&amp;#39;ll find yourself inside a VM logued as &lt;em&gt;vagrant&lt;/em&gt; user, no superuser password and a minimum installation of Ubuntu Precise. Now we can play with our machine. Let&amp;#39;s install &lt;code&gt;nginx&lt;/code&gt; as usual in an Ubuntu distro:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get update
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo apt-get -y install nginx
&lt;span class=&quot;nv&quot;&gt;$ &lt;/span&gt;sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now Ubuntu is running with nginx installed and listening for connections in port 80. Since we forwarded port 80 in guest to port 8080 in host, you can go to &lt;code&gt;http://localhost:8080&lt;/code&gt; in your host&amp;#39;s browser and check nginx welcome message!&lt;/p&gt;

&lt;h3&gt;Basic Vagrant manage&lt;/h3&gt;

&lt;p&gt;There are a lot of options to manage Vagrant; we already saw &lt;code&gt;vagrant up&lt;/code&gt; but let&amp;#39;s see more. What is cool about Vagrant is that if we mess up everything, it&amp;#39;s possible to destroy our machine and start again running &lt;code&gt;vagrant destroy&lt;/code&gt; and &lt;code&gt;vagrant up&lt;/code&gt;. That&amp;#39;s perfect to create a sandbox for our experiments.&lt;/p&gt;

&lt;p&gt;Other important option to point is &lt;code&gt;vagrant suspend&lt;/code&gt;. When you finish your work, you will not need the machine running and using resources in your host. You can suspend the machine so no resources will be used and, when you want to continue working on it, you can just run &lt;code&gt;vagrant resume&lt;/code&gt; and the image state will be restored. You can also turn completely off the machine with &lt;code&gt;vagrant halt&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;If you want to change your machine configuration during development you may be tempted to destroy and re-create your machine. Be aware that &lt;code&gt;vagrant reload&lt;/code&gt; option will reconfigure your machine without destroying it and losing the state.&lt;/p&gt;

&lt;p&gt;Other manage option widely used is &lt;code&gt;vagrant package&lt;/code&gt;. You can run it and your machine will be packaged in a box file that can be shared with your teammates to replicate the same environment you had but… that&amp;#39;s just like sharing a traditional modified OS image right? I think it&amp;#39;s much better to write a configuration specifying what you want to install in the machine and share that configuration instead of the packaged machine. This is call provisioning and we can use multiple IT automation tools to do it. Those tools are called provisioners.&lt;/p&gt;

&lt;h3&gt;Provisioners&lt;/h3&gt;

&lt;p&gt;The most basic provisioner is &lt;strong&gt;Shell script&lt;/strong&gt;. If you need more provisioning power (probably you do) Vagrant has support for multiple IT automation tools such as &lt;a href=&quot;http://www.getchef.com/chef/&quot;&gt;Chef&lt;/a&gt;, &lt;a href=&quot;http://puppetlabs.com/&quot;&gt;Puppet&lt;/a&gt;, or &lt;a href=&quot;http://www.ansible.com/home&quot;&gt;Ansible&lt;/a&gt;. To use a provisioner you just have to add &lt;a href=&quot;http://docs.vagrantup.com/v2/provisioning/index.html&quot;&gt;configuration&lt;/a&gt; to your &lt;code&gt;VagrantFile&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;It&amp;#39;s convenient to mention here a tool that is moving mountains these days: &lt;a href=&quot;http://www.docker.io&quot;&gt;Docker&lt;/a&gt;. It&amp;#39;s an open-source project to easily create lightweight, portable, self-sufficient containers from any application. If you know about this tool, you shouldn&amp;#39;t see it as a Vagrant &amp;quot;killer&amp;quot;. In fact I think that combining both is a win since Vagrant 1.5 can integrate with Docker using it as a provisioner.  &lt;/p&gt;

&lt;p&gt;Configuration through automation tools is a very wide topic, and each tool has its own documentation, so for teaching purposes we are going to check just an example with Shell. We will write a script to install &lt;code&gt;nginx&lt;/code&gt; and let you do the rest with other tools. Add to the configuration block, inside the VagrantFile, this line:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;n&quot;&gt;config&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;vm&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;provision&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;shell&amp;quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ss&quot;&gt;path&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&amp;quot;script.sh&amp;quot;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;This is telling Vagrant that at the provisioning moment we want to use shell  to run &lt;code&gt;script.sh&lt;/code&gt;. Let&amp;#39;s, create that &lt;code&gt;script.sh&lt;/code&gt; file in the same folder as your &lt;code&gt;VagrantFile&lt;/code&gt; containing:&lt;/p&gt;
&lt;div class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-bash&quot; data-lang=&quot;bash&quot;&gt;&lt;span class=&quot;nb&quot;&gt;echo&lt;/span&gt; “Running installation of nginx”
sudo apt-get update
sudo apt-get -y install nginx
sudo service nginx start
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Provisioning is made when &lt;code&gt;vagrant up&lt;/code&gt; is run. In order to run only the provisioning tools you can use the command &lt;code&gt;vagrant provision&lt;/code&gt;. Let&amp;#39;s do it and you’ll see how the commands in the script are executed. The cool thing about this if that if we document all the pieces of software and its configuration through provision tools, we can destroy the machine and run Vagrant up, then we have everything ready to work. Try it out and go to &lt;code&gt;http://localhost:8080&lt;/code&gt; in your host again, you&amp;#39;ll see everything working again.&lt;/p&gt;

&lt;p&gt;With powerful tools such as Chef, we can replicate our environment, or even recycle our scripts to use them in production and have the very same environment in production and development for testing purposes. Cool, isn&amp;#39;t it?&lt;/p&gt;

&lt;h3&gt;The Cloud&lt;/h3&gt;

&lt;p&gt;Recently, Vagrant 1.5 was released with new and great features. With this new version, Vagrant has a Cloud for sharing, discovering and creating Vagrant environments through boxes. Did you heard about &lt;a href=&quot;http://localtunnel.me/&quot;&gt;localtunnel&lt;/a&gt;? Well, now the cloud is giving you another cool feature: sharing your running environment with anyone connected to Internet. Pretty much the same that localtunnel does.&lt;/p&gt;

&lt;p&gt;To use this feature, sign up in &lt;a href=&quot;https://vagrantcloud.com/&quot;&gt;Vagrant Cloud&lt;/a&gt; and then login through the command line with &lt;code&gt;vagrant login&lt;/code&gt;. Then, with your machine running and nginx installed (just for demo purposes), run &lt;code&gt;vagrant share&lt;/code&gt;. A random URL will be generated to share with anyone. Vagrant will search for HTTP servers listening in your machine and map them to the URL given. In our example case, since nginx is listening on port 80, any request made to the share url in port 80 is going to be redirected to port 80 inside your machine. This is a great feature to share your development work with others. You can check a video &lt;a href=&quot;http://vimeo.com/87525972&quot;&gt;demo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But best thing is that you can even let others to connect to your machine using SSH! When you are running &lt;code&gt;vagrant share&lt;/code&gt;, use &lt;code&gt;--ssh&lt;/code&gt; flag. Vagrant will ask you for a password and give you instructions to connect to your machine from outside running &lt;code&gt;vagrant connect --ssh &amp;lt;random-name-given&amp;gt;&lt;/code&gt;. View a &lt;a href=&quot;http://vimeo.com/87525810&quot;&gt;demo here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;You can also run &lt;code&gt;vagrant connect &amp;lt;random-name-given&amp;gt;&lt;/code&gt; without ssh option and vagrant will create a tiny virtual machine to handle routing between you and the remote Vagrant environment. When you run it, an IP address will be given. You can directly ssh to that IP and you&amp;#39;ll be inside the machine. You have a &lt;a href=&quot;http://vimeo.com/87590529&quot;&gt;demo here&lt;/a&gt;.&lt;/p&gt;

&lt;h3&gt;Conclusion&lt;/h3&gt;

&lt;p&gt;Vagrant let you create development environments that are portable, lightweight and easy to use. You can share the environments using Vagrant Cloud or giving the configuration files with a provisioning system. You can now have your whole team working on the very same environment, even replicate your production environment too, deleting all the problems mentioned above! Here you have some links for further reading:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://shop.oreilly.com/product/0636920026358.do&quot;&gt;Vagrant: Up and Running&lt;/a&gt; by Mitchell Hashimoto, creator of Vagrant.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;https://leanpub.com/vagrantcookbook&quot;&gt;Vagrant Cookbook&lt;/a&gt; by Erika Heidi.&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://railscasts.com/episodes/292-virtual-machines-with-vagrant?view=asciicast&quot;&gt;Vagrant Railscast&lt;/a&gt; by Ryan Bates&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Nice hacking time!&lt;/p&gt;
</description>
        <pubDate>Sun, 24 Aug 2014 00:00:00 +0200</pubDate>
        <link>http://javivelasco.com/vagrant/2014/08/24/dive-into-vagrant.html</link>
        <guid isPermaLink="true">http://javivelasco.com/vagrant/2014/08/24/dive-into-vagrant.html</guid>
        
        
        <category>vagrant</category>
        
      </item>
    
  </channel>
</rss>
